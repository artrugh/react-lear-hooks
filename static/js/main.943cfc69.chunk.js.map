{"version":3,"sources":["components/UI/LoadingIndicator.js","components/Ingredients/IngredientForm.js","components/Ingredients/IngredientList.js","components/UI/ErrorModal.js","hooksStore/store.js","components/Ingredients/Search.js","hooks/http.js","components/Ingredients/Ingredients.js","components/Auth.js","App.js","hooksStore/reducer.js","index.js"],"names":["LoadingIndicator","className","IngredientForm","memo","props","useState","title","amount","inputState","setInputState","onChangeHandler","e","inputName","newValue","target","value","prevState","onSubmit","event","preventDefault","addIngredientHandler","htmlFor","type","id","onChange","loading","IngredientList","ingredients","map","ig","key","onClick","removeIngredientHandler","ErrorModal","console","log","useEffect","Fragment","onClose","children","globalState","listeners","actions","useStore","shouldListen","setState","dispatch","useCallback","actionType","payload","newState","forEach","listener","push","Search","dispatchHttp","clean","enteredFilter","setEnteredFilter","inputRef","useRef","state","timer","setTimeout","current","query","length","fetchData","clearTimeout","error","style","margin","ref","useHttp","sendRequest","url","method","body","ingredient","identifer","fetch","headers","then","res","json","resData","response","catch","err","loadedIngredients","name","Ingredients","JSON","stringify","ingredientId","ingredientList","useMemo","Auth","App","isAuth","initialState","userActions","LOGIN","SEND","RESPONSE","ERROR","CLEAN","SET","ADD","REMOVE","newIngredients","filter","ing","configStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.943cfc69.chunk.js","sourcesContent":["import React from 'react';\n\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => (\n  <div className=\"lds-ring\">\n    <div />\n    <div />\n    <div />\n    <div />\n  </div>\n);\n\nexport default LoadingIndicator;\n","import React, { \n  useState, \n  memo } from 'react';\n\nimport LoadingIndicator from './../UI/LoadingIndicator'\nimport './IngredientForm.css';\n\nconst IngredientForm = memo(props => {\n\n  const [inputState, setInputState] = useState({ title: '', amount: '' });\n\n  // console.log('RENDERING FORM BEFORE');\n  // useEffect(() => {\n  //   console.log('RENDERING FORM');\n  // });\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.addIngredientHandler(inputState)\n  };\n\n\n  const onChangeHandler = (e, inputName) => {\n    const newValue = e.target.value;\n    setInputState((prevState) => ({\n      ...prevState,\n      [inputName]: newValue\n    }))\n  }\n\n  return (\n    <section className=\"ingredient-form\">\n      <div className=\"card\">\n        <form onSubmit={submitHandler}>\n          <div className=\"form-control\">\n            <label htmlFor=\"title\">Name</label>\n            <input\n              type=\"text\"\n              id=\"title\"\n              value={inputState.title}\n              onChange={e => onChangeHandler(e, 'title')}\n            />\n          </div>\n          <div className=\"form-control\">\n            <label htmlFor=\"amount\">Amount</label>\n            <input\n              type=\"number\"\n              id=\"amount\"\n              value={inputState.amount}\n              onChange={e => onChangeHandler(e, 'amount')}\n            />\n          </div>\n          <div className=\"ingredient-form__actions\">\n            <button type=\"submit\">Add Ingredient</button>\n            {props.loading && <LoadingIndicator />}\n          </div>\n        </form>\n      </div>\n    </section>\n  );\n});\n\nexport default IngredientForm;\n","import React, {memo} from 'react';\n\nimport './IngredientList.css';\n\nconst IngredientList = memo(props => {\n  \n  // console.log('RENDERING LIST BEFORE');\n  // useEffect(() => {\n  //   console.log('RENDERING LIST');\n  // });\n  \n  return (\n    <section className=\"ingredient-list\">\n      <h2>Loaded Ingredients</h2>\n      <ul>\n        {props.ingredients.map(ig => (\n          <li key={ig.id}\n            onClick={() => props.removeIngredientHandler(ig.id)}>\n            <span>{ig.title}</span>\n            <span>{ig.amount}x</span>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n});\n\nexport default IngredientList;\n","import React, { memo, useEffect } from 'react';\n\nimport './ErrorModal.css';\n\nconst ErrorModal = memo(props => {\n  \n  console.log('RENDERING ERRORMODAL BEFORE');\n  useEffect(() => {\n    console.log('RENDERING ERRORMODAL');\n  });\n\n  return (\n    <React.Fragment>\n      <div className=\"backdrop\" onClick={props.onClose} />\n      <div className=\"error-modal\">\n        <h2>An Error Occurred!</h2>\n        <p>{props.children}</p>\n        <div className=\"error-modal__actions\">\n          <button type=\"button\" onClick={props.onClose}>\n            Okay\n          </button>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n});\n\nexport default ErrorModal;\n","import { useState, useEffect, useCallback } from 'react'\n\n// GLOBAL VARIABLES\nlet globalState = {};\nlet listeners = [];\nlet actions = {};\n\nexport const useStore = (shouldListen = true) => {\n\n    // SECOND VALUE => FUCTION HOOK\n    const setState = useState(globalState)[1]\n\n    const dispatch = useCallback((actionType, payload) => {\n\n        // ACTIONS ARE FUNCTION, SO THEY NEED ARGUMENTS (state = globalState, payload)\n        const newState = actions[actionType](globalState, payload)\n        // REWRITE THE GLOBAL STATE WITH THE NEW DATA\n        globalState = { ...globalState, ...newState }\n        // CALL EACH LISTENER DURING DISPATCHING TO UPDATE THE STATE\n        listeners.forEach(listener => listener(globalState))\n\n    }, [])\n\n    // GONNA RERENDER WHEN THE STATE IS CALL / 1ST ARGUMENT\n    useEffect(() => {\n        // IF THE DISPATCH FUNCTION OR THE STATE HAS ANY ARGUMENT WHEN IT IS INVOLKED\n        // THE DEFAULT VALUE TRUE IS PASSED, SO:\n        // USUALLY THE STATE WILL SET IN TRUE - WE WANT TO RENDER THE HOOK TO UPDATE THE STATE\n        // BUT DISPATCH WILL PASS FALSE AS AN ARG\n\n        // EX:\n        // const state = useStore()[0]\n        // const dispatchIng = useStore(false)[1]\n\n        if (shouldListen) {\n            // STORE THE SETSTATE WHICH IS NOTHING MORE THAN A HOOK FUNTIONS\n            listeners.push(setState);\n\n            // CLEAN THE LISTENERS ARRAY FILTERING THOSE FUNCTIONS WHICH ARE NOT EQUAL TO SET STATE\n           // return () => listeners = listeners.filter(li => li !== setState)\n\n        }\n    }, [setState, shouldListen])\n\n    return [globalState, dispatch]\n}\n\nexport const initStore = (userActions, initialState) => {\n\n    if (initialState) {\n        globalState = {\n            ...globalState, ...initialState\n        }\n    }\n    actions = { ...actions, ...userActions }\n}","import React, { \n  useState, \n  useEffect, \n  useRef, \n  memo } from 'react';\n\nimport './Search.css';\n\nimport ErrorModal from './../UI/ErrorModal'\n\nimport { useStore } from './../../hooksStore/store'\n\nconst Search = memo(({dispatchHttp, clean}) => {\n\n  const [enteredFilter, setEnteredFilter] = useState('');\n  const inputRef = useRef()\n\n  const state = useStore()[0]\n  \n  // console.log('RENDERING SEARCH BEFORE');\n  // useEffect(() => {\n  //   console.log('RENDERING SEARCH');\n  // });\n\n  useEffect(() => {\n    const fetchData = () => {\n      const query =\n        enteredFilter.length === 0\n          ? ''\n          : `?orderBy=\"title\"&equalTo=\"${enteredFilter}\"`\n      dispatchHttp(\n        'https://react-hooks-4782a.firebaseio.com/ingredients.json' + query,\n        'GET',\n        null,\n        null,\n        'SET')\n    }\n    const timer = setTimeout(() => {\n      if (enteredFilter === inputRef.current.value) {\n        fetchData()\n      }\n    }, 900)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [enteredFilter, dispatchHttp, inputRef]);\n\n  return (\n    <section className=\"search\">\n      {state.error && (\n        <ErrorModal onClose={clean}>{state.error}</ErrorModal>)}\n      <div className=\"card\">\n        <div className=\"search-input\">\n          <label>Filter by Title</label>\n          {state.loading && <p style={{ margin: 0 }}>loading...</p>}\n          <input\n            ref={inputRef}\n            type=\"text\"\n            value={enteredFilter}\n            onChange={e => setEnteredFilter(e.target.value)}\n          />\n        </div>\n      </div>\n    </section>\n  );\n});\n\nexport default Search;\n","import {\n    useCallback,\n    useEffect\n} from 'react';\n\nimport { useStore } from './../hooksStore/store'\n\nconst useHttp = () => {\n\n    const dispatch = useStore(false)[1]\n    const state = useStore()[0]\n\n    const clean = useCallback(() => dispatch('CLEAN'), [dispatch])\n\n    const sendRequest = useCallback((url, method, body, ingredient, identifer) => {\n\n        dispatch('SEND', identifer)\n\n        fetch(url, {\n            method: method,\n            body: body,\n            headers: { 'Content-Type': 'application/json' }\n        })\n            .then(res => {\n                return res.json()\n            })\n            .then(resData => {\n                dispatch('RESPONSE', { response: resData, ingredient: ingredient })\n\n            })\n            .catch(err => {\n                dispatch('ERROR')\n            })\n\n    }, [dispatch])\n\n    useEffect(() => {\n\n        if (!state.error && !state.loading && state.identifer === 'REMOVE') {\n\n            dispatch('REMOVE', state.ingredient)\n\n        } else if (!state.error && !state.loading && state.identifer === 'ADD') {\n\n            dispatch('ADD', {\n                id: state.response.name,\n                ...state.ingredient\n            })\n\n        } else if (!state.error && !state.loading && state.identifer === 'SET') {\n\n            const resData = state.response\n            const loadedIngredients = [];\n\n            for (const key in resData) {\n\n                loadedIngredients.push({\n                    id: key,\n                    title: resData[key].title,\n                    amount: resData[key].amount\n                })\n            }\n            dispatch('SET', loadedIngredients)\n        }\n\n    }, [\n        state.error,\n        state.loading,\n        state.response,\n        state.identifer,\n        state.ingredient,\n        dispatch]);\n\n    return [sendRequest, clean]\n\n};\n\nexport default useHttp;","import React, {\n  useCallback,\n  useMemo\n} from 'react';\n\nimport IngredientForm from './IngredientForm'\nimport IngredientList from './IngredientList'\nimport ErrorModal from './../UI/ErrorModal'\nimport Search from './Search'\n\nimport useHttp from './../../hooks/http'\nimport { useStore } from './../../hooksStore/store'\n\n\nconst Ingredients = () => {\n\n  const [dispatchHttp, clean] = useHttp();\n\n  const state = useStore()[0]\n\n  // console.log('RENDERING INGREDIENTS BEFORE');\n  // useEffect(() => {\n  //   console.log('RENDERING INGREDIENTS');\n  // });\n\n  const addIngredientHandler = useCallback(ingredient => {\n    dispatchHttp(`https://react-hooks-4782a.firebaseio.com/ingredients.json`,\n      'POST',\n      JSON.stringify(ingredient),\n      ingredient,\n      'ADD'\n    );\n  }, [dispatchHttp])\n\n  const removeIngredientHandler = useCallback(ingredientId => {\n    dispatchHttp(`https://react-hooks-4782a.firebaseio.com/ingredients/${ingredientId}.json`,\n      'DELETE',\n      null,\n      ingredientId,\n      'REMOVE'\n    );\n  }, [dispatchHttp])\n\n\n  const ingredientList = useMemo(() => (\n    <IngredientList\n      ingredients={state.ingredients}\n      removeIngredientHandler={removeIngredientHandler} />\n  ), [state.ingredients, removeIngredientHandler])\n\n  return (\n    <div className=\"App\">\n\n      {state.error && (\n        <ErrorModal onClose={clean}>{state.error}</ErrorModal>)}\n      <IngredientForm\n        loading={state.loading}\n        addIngredientHandler={addIngredientHandler} />\n\n      <section>\n        <Search\n          dispatchHttp={dispatchHttp}\n          clean={clean}\n        />\n        {ingredientList}\n      </section>\n    </div>\n  );\n}\n\nexport default Ingredients;\n","import React from 'react';\n\nimport './Auth.css';\n\nimport { useStore } from './../hooksStore/store'\n\nconst Auth = () => {\n\n  const dispatch = useStore(false)[1]\n\n  // console.log('RENDERING AUTH BEFORE');\n  // useEffect(() => {\n  //   console.log('RENDERING AUTH');\n  // });\n\n  const loginHandler = () => {\n    dispatch('LOGIN')\n  };\n\n  return (\n    <div className=\"auth\">\n      <div className=\"card\">\n        <h2>You are not authenticated!</h2>\n        <p>Please log in to continue.</p>\n        <button onClick={loginHandler}>Log In</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Auth;\n","import React from 'react';\n\nimport Ingredients from './components/Ingredients/Ingredients';\nimport Auth from './components/Auth';\n\nimport { useStore } from './hooksStore/store'\n\nconst App = () => {\n  // shouldListen true\n  const state = useStore()[0]\n  return state.isAuth ? <Ingredients /> : <Auth />\n\n};\n\nexport default App;\n","import { initStore } from './store';\n\nconst initialState = {\n    loading: false,\n    error: null,\n    response: null,\n    identifer: null,\n    ingredient: null,\n    isAuth: false,\n    ingredients: []\n}\n\nconst configStore = () => {\n\n    const actions = {\n\n        LOGIN: state => ({ ...state, isAuth: true }),\n\n        // fetching data,\n\n        SEND: (state, identifer) => ({\n            ...state,\n            loading: true,\n            error: null,\n            response: null,\n            identifer: identifer\n        }),\n\n        RESPONSE: (state, payload) => ({\n            ...state,\n            loading: false,\n            response: payload.response,\n            ingredient: payload.ingredient\n        }),\n\n        ERROR: state => ({\n            ...state,\n            loading: false,\n            error: 'something went wrong'\n        }),\n\n        CLEAN: (state) => ({\n            ...initialState,\n            isAuth: state.isAuth\n        }),\n\n        // managing ingredient\n\n        SET: (state, ingredients) => ({\n            ...state,\n            ingredients: ingredients,\n        }),\n\n        ADD: (state, ingredient) => ({\n            ...state,\n            ingredients: [...state.ingredients, ingredient],\n\n        }),\n\n        REMOVE: (state, id) => {\n\n            const newIngredients = state.ingredients\n                .filter(ing => ing.id !== id)\n\n            return { ...state, ingredients: newIngredients }\n        }\n    }\n\n    initStore(actions, initialState)\n}\n\nexport default configStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nimport configStore from './hooksStore/reducer';\n\n// init store\nconfigStore();\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}